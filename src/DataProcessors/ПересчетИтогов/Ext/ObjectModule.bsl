
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем Версия; // Версия отчета или обработки.
Перем ВерсияБСП; // Версия библиотеки, на которую рассчитывают механизмы внешней обработки.
Перем БезопасныйРежим; // Признак подключения внешней обработки в безопасном режиме
Перем Информация; // Краткая информация о внешней обработке.
Перем Команды; // Настройки команд, поставляемых внешней обработкой.

Перем Идентификатор; // Идентификатор команды.
Перем Представление; // Представление команды.

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Сервисная экспортная функция. Вызывается в основной программе при регистрации обработки в информационной базе.
//	Возвращает структуру с параметрами регистрации.
//
// Возвращаемое значение:
//   Структура   - См. ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();
//
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();
	ПараметрыРегистрации.Вставить("Вид", ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Наименование", Представление);
	ПараметрыРегистрации.Вставить("Версия", Версия);
	ПараметрыРегистрации.Вставить("ВерсияБСП", ВерсияБСП);
	ПараметрыРегистрации.Вставить("БезопасныйРежим", БезопасныйРежим);
    ПараметрыРегистрации.Вставить("Информация", Информация);

	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Идентификатор = Идентификатор;
	Команда.Представление = Представление;
	Команда.ПоказыватьОповещение = Истина;
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();

	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Идентификатор = "ВыполнитьФоновоеЗадание";
	Команда.Представление = Представление;
	Команда.ПоказыватьОповещение = Ложь;
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	
	Возврат ПараметрыРегистрации;

КонецФункции

// Выполняет команду обработки.
//   Подробнее - см. ДополнительныеОтчетыИОбработки.ВыполнитьКоманду().
//
// Параметры:
//  ИдентификаторКоманды	 - Строка - Идентификатор команды.
//					См. ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке().
//
Процедура ВыполнитьКоманду(ИдентификаторКоманды) Экспорт

	Если ИдентификаторКоманды = "ВыполнитьФоновоеЗадание" Тогда
		
		ВыполнитьОбработку();
				
	КонецЕсли;	

КонецПроцедуры

// Заполняет дерево значений данными метаданных регистров.
//
// Параметры:
//  ДеревоРегистров	 - ДеревоЗначений - Дерево, для заполнения регистрами.
//
Процедура СформироватьСтруктуруМетаданных(ДеревоРегистров) Экспорт
	
	ДеревоРегистров.Строки.Очистить();
	
	ИменаОбъектовМетаданных = ИменаОбъектовМетаданных();
	
	Для каждого ИмяОбъектаМетаданных Из ИменаОбъектовМетаданных Цикл
		ДобавитьВетвьРегистров(ДеревоРегистров, ИмяОбъектаМетаданных);
	КонецЦикла;
	
КонецПроцедуры

// Выполняет обработку регистров.
//
// Параметры:
//  МассивРегистров  - Массив - Коллекция полных имен регистров вида "РегистрыНакопления.Продажи"
//
Процедура ВыполнитьОбработку() Экспорт
	
	ИменаРегистров = Новый Массив;
	
	ИменаОбъектовМетаданных = ИменаОбъектовМетаданных();
	
	Для каждого ИмяОбъектаМетаданных Из ИменаОбъектовМетаданных Цикл
		
		ИменаРегистровПоВиду = ОписанияРегистров(ИмяОбъектаМетаданных);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИменаРегистров, ИменаРегистровПоВиду);
		
	КонецЦикла;
	
	ИменаОчищаемыхТаблиц = ПодготовитьИменаОчищаемыхТаблиц(ИменаРегистров);
	
	ОчиститьТаблицыРегистров(ИменаОчищаемыхТаблиц);	

	ПересчитатьИтогиРегистров(ИменаРегистров);	

КонецПроцедуры
 
Функция ПодготовитьИменаОчищаемыхТаблиц(ИменаРегистров) Экспорт
	
	ИменаОчищаемыхТаблиц = Новый Массив;
	
	Для каждого ПолноеИмяРегистра Из ИменаРегистров Цикл
			
		ИменаТаблицХраненияИтогов = ИменаТаблицХраненияИтогов(ПолноеИмяРегистра);
			
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИменаОчищаемыхТаблиц, ИменаТаблицХраненияИтогов); 
			
	КонецЦикла; 
	
	Возврат ИменаОчищаемыхТаблиц;

КонецФункции

Функция ОпределитьДоступностьСервераMSSQL() Экспорт
	
	Если ИнформационнаяБазаФайловая() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Возврат СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86
		ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64;		

КонецФункции

Функция ПолучитьСтруктуруСоединенияИнформационнойБазы() Экспорт

	СтруктуруСоединения = Новый Структура("ИмяСервера, ИмяБД");
	
	СтрокаСоединенияСБД = СтрокаСоединенияИнформационнойБазы();
	
	Если ИнформационнаяБазаФайловая() Тогда
		Возврат Сред(СтрокаСоединенияСБД, 6, СтрДлина(СтрокаСоединенияСБД) - 6);
	КонецЕсли;
		
	// Прибавить к имени сервера имя пути информационной базы
	ПозицияПоиска = СтрНайти(Врег(СтрокаСоединенияСБД), "SRVR=");
	Если ПозицияПоиска <> 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПозицияТочкиСЗапятой = СтрНайти(СтрокаСоединенияСБД, ";");
	НачальнаяПозицияКопирования = 6 + 1;
	КонечнаяПозицияКопирования = ПозицияТочкиСЗапятой - 2; 
	
	ИмяСервера = Сред(СтрокаСоединенияСБД, НачальнаяПозицияКопирования, 
		КонечнаяПозицияКопирования - НачальнаяПозицияКопирования + 1);
	
	СтрокаСоединенияСБД = Сред(СтрокаСоединенияСБД, ПозицияТочкиСЗапятой + 1);
	
	// Позиция имени сервера
	ПозицияПоиска = СтрНайти(Врег(СтрокаСоединенияСБД), "REF=");
	Если ПозицияПоиска <> 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НачальнаяПозицияКопирования = 6;
	ПозицияТочкиСЗапятой = СтрНайти(СтрокаСоединенияСБД, ";");
	КонечнаяПозицияКопирования = ПозицияТочкиСЗапятой - 2; 
	
	ИмяБД = Сред(СтрокаСоединенияСБД, НачальнаяПозицияКопирования,
		КонечнаяПозицияКопирования - НачальнаяПозицияКопирования + 1);
	
	СтруктуруСоединения.Вставить("ИмяСервера", 	ИмяСервера);
	СтруктуруСоединения.Вставить("ИмяБД", 		ИмяБД);
	
	Возврат СтруктуруСоединения;
	
КонецФункции

Функция СтрокаПодключения(Знач ПараметрыПодключения = Неопределено) Экспорт

	Если ПараметрыПодключения = Неопределено Тогда
		ПараметрыПодключения = ПрочитатьПараметрыПодключения();
	КонецЕсли;
	
	Подстроки = Новый Массив;
	
	Подстроки.Добавить("Provider=SQLOLEDB.1");

	Если ПараметрыПодключения.АутентификацияОС Тогда
	
		Подстроки.Добавить("Persist Security Info= True");
		Подстроки.Добавить("Trusted_Connection=yes");
		
	Иначе
		
		Подстроки.Добавить("Persist Security Info = False");
		
		СтрокаИмяПользователя = СтрШаблон("User ID = %1", ПараметрыПодключения.ИмяПользователя); 
		Подстроки.Добавить(СтрокаИмяПользователя);

		СтрокаПароль = СтрШаблон("Password = %1", ПараметрыПодключения.Пароль); 
		Подстроки.Добавить(СтрокаПароль);
		
	КонецЕсли; 

	СтрокаИмяБД = СтрШаблон("Initial Catalog=%1", ПараметрыПодключения.ИмяБД); 
	Подстроки.Добавить(СтрокаИмяБД);
	
	СтрокаИмяСервера = СтрШаблон("Data Source=%1", ПараметрыПодключения.ИмяСервера); 
	Подстроки.Добавить(СтрокаИмяСервера);

	СтрокаПодключения = СтрСоединить(Подстроки, ";");
	
	Возврат СтрокаПодключения;
	
КонецФункции

Процедура ПересчитатьИтогиРегистров(ИменаРегистров) Экспорт

	Для каждого ПолноеИмяРегистра Из ИменаРегистров Цикл
		
		Если НЕ ТипЗнч(ПолноеИмяРегистра) = Тип("Строка") Тогда
			Продолжить;
		КонецЕсли; 
		
		Подстроки = СтрРазделить(ПолноеИмяРегистра, ".");
		
		Если НЕ Подстроки.Количество() = 2 Тогда
			Продолжить;
		КонецЕсли; 
		
		ИмяВидаРегистра = Подстроки[0];
		ИмяРегистра = Подстроки[1];
		СинонимРегистра = СинонимРегистра(ИмяВидаРегистра, ИмяРегистра);
		
		Если ИмяВидаРегистра = "РегистрыНакопления" Тогда
			Если НЕ РегистрыНакопления[ИмяРегистра].ПолучитьИспользованиеИтогов() Тогда
				РегистрыНакопления[ИмяРегистра].УстановитьИспользованиеИтогов(Истина);
			КонецЕсли; 
			РегистрыНакопления[ИмяРегистра].ПересчитатьИтоги();
		ИначеЕсли ИмяВидаРегистра = "РегистрыБухгалтерии" Тогда
			Если НЕ РегистрыБухгалтерии[ИмяРегистра].ПолучитьИспользованиеИтогов() Тогда
				РегистрыБухгалтерии[ИмяРегистра].УстановитьИспользованиеИтогов(Истина);
			КонецЕсли; 
			РегистрыБухгалтерии[ИмяРегистра].ПересчитатьИтоги();
		ИначеЕсли ИмяВидаРегистра = "РегистрыСведений" Тогда
			Если НЕ РегистрыСведений[ИмяРегистра].ПолучитьИспользованиеИтогов() Тогда
				РегистрыСведений[ИмяРегистра].УстановитьИспользованиеИтогов(Истина);
			КонецЕсли; 
			РегистрыСведений[ИмяРегистра].ПересчитатьИтоги();
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПараметрыПодключения()
	
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("ИмяСервера", "");
	ПараметрыПодключения.Вставить("ИмяБД", "");
	ПараметрыПодключения.Вставить("АутентификацияОС", Ложь);
	ПараметрыПодключения.Вставить("ИмяПользователя", "");
	ПараметрыПодключения.Вставить("Пароль", "");
	
	Возврат ПараметрыПодключения;	
	
КонецФункции	

Функция ИменаТаблицХраненияИтогов(ПолноеИмяРегистра)
	
	ИменаТаблицХранения = Новый Массив;
		
	Если НЕ ТипЗнч(ПолноеИмяРегистра) = Тип("Строка") Тогда
		Возврат ИменаТаблицХранения;
	КонецЕсли; 
		
	Подстроки = СтрРазделить(ПолноеИмяРегистра, ".");
		
	Если НЕ Подстроки.Количество() = 2 Тогда
		Возврат ИменаТаблицХранения;
	КонецЕсли; 

	ИмяВидаРегистра = Подстроки[0];
	ИмяРегистра = Подстроки[1];
	
	ОбъектыМетаданных = Новый Массив;
	ОбъектыМетаданных.Добавить(Метаданные[ИмяВидаРегистра][ИмяРегистра]);
	ТаблицаСтруктуры = ПолучитьСтруктуруХраненияБазыДанных(ОбъектыМетаданных, Истина);
	
	Для каждого СтрокаТаблицы Из ТаблицаСтруктуры Цикл
		Если СтрокаТаблицы.Назначение = "Итоги"
		 ИЛИ СтрокаТаблицы.Назначение = "Обороты"
		 // РС
		 ИЛИ СтрокаТаблицы.Назначение = "ИтогиСрезПоследних"
		 ИЛИ СтрокаТаблицы.Назначение = "ИтогиСрезПервых"
		 // регисты бухгалтерии
		 ИЛИ СтрокаТаблицы.Назначение = "ИтогиМеждуСчетами"
		 ИЛИ СтрокаТаблицы.Назначение = "ИтогиПоСчетам"
		 ИЛИ СтрокаТаблицы.Назначение = "ИтогиПоСчетамССубконто1"
		 ИЛИ СтрокаТаблицы.Назначение = "ИтогиПоСчетамССубконто2"
		 ИЛИ СтрокаТаблицы.Назначение = "ИтогиПоСчетамССубконто3"
		Тогда
			ИменаТаблицХранения.Добавить(СтрокаТаблицы.ИмяТаблицыХранения);	
		КонецЕсли;	
	КонецЦикла; 
	
	Возврат	ИменаТаблицХранения;

КонецФункции

// Выполняет подключение к СУБД и очищает регистры.
//
// Параметры:
//  ПараметрыПодключения  - Структура - Параметры подключения. См. ПараметрыПодключения().
//  Connection  - COMОбъект - Подключение к MS-SQL.
//  ИменаОчищаемыхТаблиц  - Массив - Имена очищаемых таблиц.
//
Процедура ОчиститьТаблицыСредствамиSQL(ПараметрыПодключения, Connection, ИменаОчищаемыхТаблиц)
	
	Если Connection = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Попытка
		Command = Новый COMОбъект("ADODB.Command");
		Command.ActiveConnection = Connection;
		
		ТекстКоманды = 
			"USE " + ПараметрыПодключения.ИмяБД + " 
			|";
		
		Для каждого ИмяТаблицы Из ИменаОчищаемыхТаблиц Цикл
		
			ТекстКоманды = ТекстКоманды + "
				|TRUNCATE TABLE [DBO].[" + ИмяТаблицы + "]
				|";
		
		КонецЦикла; 
		
		Command.CommandText = ТекстКоманды;
		Command.Execute();    
		
	Исключение
		
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = СтрШаблон("Не удалось очистить таблицы регистров. %1", ПодробноеПредставлениеОшибки);
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;	

КонецПроцедуры

Процедура ОчиститьТаблицыРегистров(ИменаОчищаемыхТаблиц)
	
	Connection = Неопределено; 
	ПараметрыПодключения = ПрочитатьПараметрыПодключения();
	
	ОткрытьПодключение(ПараметрыПодключения, Connection);

	ОчиститьТаблицыСредствамиSQL(ПараметрыПодключения, Connection, ИменаОчищаемыхТаблиц);
	
	ЗакрытьПодключение(Connection);

КонецПроцедуры
 
Процедура ОткрытьПодключение(ПараметрыПодключения, Connection)
	
	Попытка

		Connection = Новый COMОбъект("ADODB.Connection");
		ConnectionString = СтрокаПодключения(ПараметрыПодключения);
		
		Если Connection.State = 0 Тогда
			Connection.Open(ConnectionString);
		КонецЕсли;
		
	Исключение
		
		Connection = Неопределено;
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписатьВЖурналРегистрации(ПодробноеПредставлениеОшибки, УровеньЖурналаРегистрации.Ошибка);		
		
	КонецПопытки;

КонецПроцедуры

Процедура ЗакрытьПодключение(Connection)
	
	Если НЕ Connection = Неопределено Тогда
		Connection.Close();	
		Connection = Неопределено;
	КонецЕсли; 
		
КонецПроцедуры

Функция СинонимРегистра(ВидРегистра, ИмяРегистра)

	Возврат Метаданные[ВидРегистра][ИмяРегистра].Синоним;

КонецФункции

Функция ПолучитьСтруктуруБД() 
	
	ОбъектыМетаданных = Новый Массив;
	Для каждого МетаданныеРегистр Из Метаданные.РегистрыНакопления Цикл
		ОбъектыМетаданных.Добавить(МетаданныеРегистр);
	КонецЦикла; 
	
	Возврат ПолучитьСтруктуруХраненияБазыДанных(ОбъектыМетаданных, Истина);

КонецФункции

Функция ИменаОбъектовМетаданных()
	
	Имена = Новый Массив;
	
	Имена.Добавить("РегистрыСведений");
	Имена.Добавить("РегистрыБухгалтерии");
	Имена.Добавить("РегистрыНакопления");

	Возврат Имена;
	
КонецФункции

Функция КартинкаОбъектаМетаданных(ИмяОбъектаМетаданных)
	
	Картинки = Новый Соответствие;
	
	Картинки.Вставить("РегистрыСведений", 0);
	Картинки.Вставить("РегистрыБухгалтерии", 1);
	Картинки.Вставить("РегистрыНакопления", 2);

	Возврат Картинки.Получить(ИмяОбъектаМетаданных);
	
КонецФункции

Функция СинонимОбъектаМетаданных(ИмяОбъектаМетаданных)
	
	Синонимы = Новый Соответствие;
	
	Синонимы.Вставить("РегистрыСведений", "Регистры сведений");
	Синонимы.Вставить("РегистрыБухгалтерии", "Регистры бухгалтерии");
	Синонимы.Вставить("РегистрыНакопления", "Регистры накопления");

	Возврат Синонимы.Получить(ИмяОбъектаМетаданных);
	
КонецФункции

Процедура ДобавитьВетвьРегистров(ДеревоДанных, ИмяОбъектаМетаданных)
	
	Если ИмяОбъектаМетаданных = "РегистрыСведений" Тогда
		Если НЕ ПлатформаСтарше831() Тогда
			Возврат;
		КонецЕсли; 	
	КонецЕсли;

	ОписанияРегистров = ОписанияРегистров(ИмяОбъектаМетаданных);
	Если ОписанияРегистров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИндексКартинки = КартинкаОбъектаМетаданных(ИмяОбъектаМетаданных);
	Синоним = СинонимОбъектаМетаданных(ИмяОбъектаМетаданных);
	
	НоваяСтрокаВидОбъекта = ДеревоДанных.Строки.Добавить();
	НоваяСтрокаВидОбъекта.Имя = ИмяОбъектаМетаданных;
	НоваяСтрокаВидОбъекта.Синоним = Синоним;
	НоваяСтрокаВидОбъекта.ИндексКартинки = ИндексКартинки;
	
	Для каждого ОписаниеРегистра Из ОписанияРегистров Цикл
		
		НоваяСтрокаОбъект = НоваяСтрокаВидОбъекта.Строки.Добавить();
		НоваяСтрокаОбъект.Имя = ОписаниеРегистра.Имя;
		НоваяСтрокаОбъект.Синоним = ОписаниеРегистра.Синоним;
		НоваяСтрокаОбъект.ИндексКартинки = ИндексКартинки;
			
	КонецЦикла;
	
КонецПроцедуры	

// Формирует массив полных имен регистров
//
// Параметры:
//  ИмяОбъектаМетаданных	 - Строка - Вид регистров
// 
// Возвращаемое значение:
//  Массив - Коллекция имен регистров.
//
Функция ОписанияРегистров(ИмяОбъектаМетаданных)
	
	ОписанияРегистров = Новый Массив;
	
	Для каждого ОбъектМетаданных Из Метаданные[ИмяОбъектаМетаданных] Цикл
		
		Если Метаданные[ИмяОбъектаМетаданных] = Метаданные.РегистрыСведений Тогда
			Если НЕ ОбъектМетаданных.РазрешитьИтогиСрезПервых 
			   И НЕ ОбъектМетаданных.РазрешитьИтогиСрезПоследних Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли; 
		
		ОписаниеРегистра = Новый Структура("Имя, Синоним", "", "");
		ОписаниеРегистра.Имя = ОбъектМетаданных.Имя;
		ОписаниеРегистра.Синоним = ОбъектМетаданных.Синоним;
		ОписанияРегистров.Добавить(ОписаниеРегистра);
		
	КонецЦикла;
	
	Возврат ОписанияРегистров;
	
КонецФункции

Функция ИнформационнаяБазаФайловая()
			
	СтрокаСоединенияИнформационнойБазы =  СтрокаСоединенияИнформационнойБазы();
	Возврат СтрНайти(Врег(СтрокаСоединенияИнформационнойБазы), "FILE=") = 1;
	
КонецФункции 

Функция ПлатформаСтарше831()

	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Возврат СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.3.1.0") > 0;
	
КонецФункции 

// Сравнить две строки версий.
//
// Параметры:
//  СтрокаВерсии1  - Строка - номер версии в формате РР.{П|ПП}.ЗЗ.СС
//  СтрокаВерсии2  - Строка - второй сравниваемый номер версии
//
// Возвращаемое значение:
//  Число  - больше 0, если СтрокаВерсии1 > СтрокаВерсии2; 0, если версии равны.
//
Функция СравнитьВерсии(Знач СтрокаВерсии1, Знач СтрокаВерсии2)
	
	Строка1 = ?(ПустаяСтрока(СтрокаВерсии1), "0.0.0.0", СтрокаВерсии1);
	Строка2 = ?(ПустаяСтрока(СтрокаВерсии2), "0.0.0.0", СтрокаВерсии2);
	Версия1 = СтрРазделить(Строка1, ".");
	Если Версия1.Количество() <> 4 Тогда
		Шаблон = НСтр("ru = 'Неправильный формат строки версии: %1'");
		ТекстОшибки = СтрШаблон(Шаблон, СтрокаВерсии1);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	Версия2 = СтрРазделить(Строка2, ".");
	Если Версия2.Количество() <> 4 Тогда
		Шаблон = НСтр("ru = 'Неправильный формат строки версии: %1'");
		ТекстОшибки = СтрШаблон(Шаблон, СтрокаВерсии2);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Результат = 0;
	Для Разряд = 0 По 3 Цикл
		Результат = Число(Версия1[Разряд]) - Число(Версия2[Разряд]);
		Если Результат <> 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

// В вызывающем коде перед записью данных необходимо проверить права
//	и установить привилегированный режим.
//	Сохраняет данные подключения к сервису.
//
// Параметры:
//  ПараметрыПодключения  - Структура - Сохраняемые данные. См. ПараметрыПодключения().
//
// Возвращаемое значение:
//   Булево   - Истина, в случае успешного сохранения настроке.
//
Функция СохранитьПараметрыПодключения(ПараметрыПодключения)

	ОписаниеДанных = НСтр("ru = 'данные подключения к MS-SQL'");
	КлючНастроек = КлючНастроек();
	
	Если ПараметрыПодключения = Неопределено Тогда
		
		// Удалить все данные для логина из безопасного хранилища.
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(ИдентификаторПодсистемы());
		
		Шаблон = НСтр("ru = 'Очищены %1.'");
		ТекстСообщения = СтрШаблон(Шаблон, ОписаниеДанных);
		ЗаписатьВЖурналРегистрации(ТекстСообщения);
		
	Иначе
		
		// Запись данных в безопасное хранилище
		ИдентификаторПодсистемы = ИдентификаторПодсистемы();
		
		НачатьТранзакцию();
		
		Попытка
			
			ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(ИдентификаторПодсистемы);
			
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ИдентификаторПодсистемы, ПараметрыПодключения,
				КлючНастроек);
				
			ЗафиксироватьТранзакцию();

		Исключение
			
			ОтменитьТранзакцию();
			
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписатьВЖурналРегистрации(ПодробноеПредставлениеОшибки, УровеньЖурналаРегистрации.Ошибка);
		
			ВызватьИсключение ПодробноеПредставлениеОшибки;
			
		КонецПопытки;
		
		Шаблон = НСтр("ru = 'Записаны %1.'");
		ТекстСообщения = СтрШаблон(Шаблон, ОписаниеДанных);
		ЗаписатьВЖурналРегистрации(ТекстСообщения);
		
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

// Записывает событие в журнал регистрации.
//
// Параметры:
//	ТекстОшибки - Строка - строковое представление ошибки.
//	Уровень - УровеньЖурналаРегистрации - Уровень важности события. Значение по умолчанию: Примечание. 
//	Данные - Произвольный - данные, к которым относится сообщение об ошибке.
//
Процедура ЗаписатьВЖурналРегистрации(ТекстОшибки, Уровень = Неопределено, Данные = Неопределено)
	
	Если Уровень = Неопределено Тогда
		Уровень = УровеньЖурналаРегистрации.Информация;
	КонецЕсли; 
	
	ИмяСобытия = СобытиеЖурналаРегистрации();
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, Уровень, , Данные, ТекстОшибки);
	
КонецПроцедуры

// Возвращается имя события журнала регистрации для записи ошибок.
//
// Возвращаемое значение:
//	Строка - Имя события ошибки.
//
Функция СобытиеЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Ускоренный полный пересчет итогов регистров'");
	
КонецФункции

// Возвращает данные подключения к сервису,
//	сохраненные в информационной базе.
//	Перед вызовом вызывающий код должен устанавливать привилегированный режим.
//
// Возвращаемое значение:
//	Структура - структура, содержащая параметры подключения
//	См. гк_ИнтеграцияССервисомПартнерка.ПараметрыПодключения().
//
Функция ПрочитатьПараметрыПодключения()

	ИдентификаторПодсистемы = ИдентификаторПодсистемы();
	КлючНастроек = КлючНастроек();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеВБезопасномХранилище = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		ИдентификаторПодсистемы, КлючНастроек);

	ПараметрыПодключения = ПараметрыПодключения();	
	
	Если Не ДанныеВБезопасномХранилище = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыПодключения, ДанныеВБезопасномХранилище);
	КонецЕсли;	
	
	Возврат ПараметрыПодключения;

КонецФункции

// Возвращает идентификатор подсистемы в справочнике объектов
// 	метаданных.
//
// Возвращаемое значение:
//	Строка - идентификатор подсистемы.
//
Функция ИдентификаторПодсистемы()
	
	Возврат "УскоренныйПолныйПересчетИтоговРегистров";
	
КонецФункции

// Возвращает ключ настроек для хранения в безопасном хранилище.
//
// Возвращаемое значение:
//	Строка - ключ.
//
Функция КлючНастроек()
	
	Возврат "ПараметрыПодключения";
	
КонецФункции

#КонецОбласти

#Область Инициализация

Версия = "1.0.0.7";
ВерсияБСП = Неопределено;
БезопасныйРежим = Ложь;
Представление = Метаданные().Синоним;
Идентификатор = Метаданные().Имя;
Информация = СтрШаблон("%1. Версия %2", Представление, Версия);          

#КонецОбласти

#КонецЕсли
