////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем ДоступнаРаботаСMSSQL Экспорт;
Перем Connection Экспорт;

#Если Сервер Или ВнешнееСоединение Тогда
Перем Версия, Представление, Идентификатор, Информация;

//#Область ПрограммныйИнтерфейс

// Сервисная экспортная функция. Вызывается в основной программе при регистрации обработки в информационной базе
// Возвращает структуру с параметрами регистрации
//
// Возвращаемое значение:
//		Структура с полями:
//			Вид - строка, вид обработки, один из возможных: "ДополнительнаяОбработка", "ДополнительныйОтчет", 
//					"ЗаполнениеОбъекта", "Отчет", "ПечатнаяФорма", "СозданиеСвязанныхОбъектов"
//			Назначение - Массив строк имен объектов метаданных в формате: 
//					<ИмяКлассаОбъектаМетаданного>.[ * | <ИмяОбъектаМетаданных>]. 
//					Например, "Документ.СчетЗаказ" или "Справочник.*". Параметр имеет смысл только для назначаемых обработок, для глобальных может не задаваться.
//			Наименование - строка - Наименование обработки, которым будет заполнено наименование элемента справочника по умолчанию.
//			Информация  - строка - Краткая информация или описание по обработке.
//			Версия - строка - Версия обработки в формате “<старший номер>.<младший номер>” используется при загрузке обработок в информационную базу.
//			БезопасныйРежим - булево - Принимает значение Истина или Ложь, в зависимости от того, требуется ли устанавливать или отключать безопасный режим 
//							исполнения обработок. Если истина, обработка будет запущена в безопасном режиме. 
//
//
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	ПараметрыРегистрации.Версия = Версия;
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
    ПараметрыРегистрации.Вставить("Информация", Информация);

	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление = Представление;
	Команда.Идентификатор = Идентификатор;
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();

	Возврат ПараметрыРегистрации;

КонецФункции

//#КонецОбласти
#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Функция НомерПубликации() Экспорт

	Возврат "689061";

КонецФункции 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ВЫПОЛНЕНИЯ ОБРАБОТКИ

// Параметры:
//  МассивРегистров - массив полных имен регистров вида "РегистрыНакопления.Продажи"
//
Процедура ВыполнитьОбработку(МассивРегистров) Экспорт
	
	Если ОчищатьТаблицыСредствамиSQL Тогда

		ОчиститьТаблицыСредствамиSQL(МассивРегистров);	
		
	КонецЕсли; 
	
	Если ПересчитыватьИтоги Тогда
	
		ПересчитатьИтоги(МассивРегистров);	
	
	КонецЕсли; 

КонецПроцедуры

// Параметры:
//  МассивРегистров - массив полных имен регистров вида "РегистрыНакопления.Продажи"
//
Процедура ОчиститьТаблицыСредствамиSQL(МассивРегистров)

	Если ДоступнаРаботаСMSSQL И ОчищатьТаблицыСредствамиSQL И Connection = Неопределено Тогда
		ВыполнитьПодключениеКСерверуSQL();
	КонецЕсли;	
	
	Для каждого ПолноеИмяРегистра Из МассивРегистров Цикл
		
		ОчиститьТаблицуСредствамиSQL(ПолноеИмяРегистра);
	
	КонецЦикла; 
	
	Если НЕ Connection = Неопределено Тогда
		Connection.Close();	
		Connection = Неопределено;
	КонецЕсли; 
	
КонецПроцедуры // ОчиститьТаблицыСредствамиSQL

// Параметры:
//  МассивРегистров - массив полных имен регистров вида "РегистрыНакопления.Продажи"
//
Процедура ПересчитатьИтоги(МассивРегистров)

	Для каждого ПолноеИмяРегистра Из МассивРегистров Цикл
		
		Если НЕ ТипЗнч(ПолноеИмяРегистра) = Тип("Строка") Тогда
			Продолжить;
		КонецЕсли; 
		
		Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ПолноеИмяРегистра, ".");
		
		Если НЕ Подстроки.Количество() = 2 Тогда
			Продолжить;
		КонецЕсли; 
		
		ИмяВидаРегистра = Подстроки[0];
		ИмяРегистра = Подстроки[1];
		СинонимРегистра = СинонимРегистра(ИмяВидаРегистра, ИмяРегистра);
		
		Если ИмяВидаРегистра = "РегистрыНакопления" Тогда
			Если НЕ РегистрыНакопления[ИмяРегистра].ПолучитьИспользованиеИтогов() Тогда
				РегистрыНакопления[ИмяРегистра].УстановитьИспользованиеИтогов(Истина);
			КонецЕсли; 
			РегистрыНакопления[ИмяРегистра].ПересчитатьИтоги();
			ТекстСообщения = "накопления """ + СинонимРегистра + """."; 
		ИначеЕсли ИмяВидаРегистра = "РегистрыБухгалтерии" Тогда
			Если НЕ РегистрыБухгалтерии[ИмяРегистра].ПолучитьИспользованиеИтогов() Тогда
				РегистрыБухгалтерии[ИмяРегистра].УстановитьИспользованиеИтогов(Истина);
			КонецЕсли; 
			РегистрыБухгалтерии[ИмяРегистра].ПересчитатьИтоги();
			ТекстСообщения = "бухгалтерии """ + СинонимРегистра + """."; 
		ИначеЕсли ИмяВидаРегистра = "РегистрыСведений" Тогда
			Если НЕ РегистрыСведений[ИмяРегистра].ПолучитьИспользованиеИтогов() Тогда
				РегистрыСведений[ИмяРегистра].УстановитьИспользованиеИтогов(Истина);
			КонецЕсли; 
			РегистрыСведений[ИмяРегистра].ПересчитатьИтоги();
			ТекстСообщения = "сведений """ + СинонимРегистра + """."; 
		КонецЕсли;
		СообщитьИнформацию(Символы.Таб + "Выполнен пересчет итогов регистра " + ТекстСообщения); 
		
	КонецЦикла; 
	
КонецПроцедуры // ПересчитатьИтоги

Функция ВыполнитьПодключениеКСерверуSQL(Отказ = Ложь) Экспорт 
	
	Connection = Новый COMОбъект("ADODB.Connection");
	
	Если АутентификацияОС Тогда
		ConnectionString = "Provider=SQLOLEDB.1;" + 
		"Persist Security Info= True;" +
		"Trusted_Connection=yes;"  +
		"Initial Catalog=" + ИмяБД + ";" + 
		"Data Source=" + ИмяСервера+ ";";
	Иначе	
		ConnectionString = "Provider=SQLOLEDB.1;" + 
		"Persist Security Info = False;" +
		"User ID = " + ИмяПользователя + ";" +
		"Password = " + Пароль + ";" + 
		"Initial Catalog = " + ИмяБД + ";" + 
		"Data Source=" + ИмяСервера;
	КонецЕсли;	
		
    Попытка
        Если Connection.State = 0 Тогда
            Connection.Open(ConnectionString);
        КонецЕсли;
    Исключение 
		СообщитьОбОшибке("Не удалось подключиться к серверу SQL. " + ОписаниеОшибки(), Отказ);
    КонецПопытки;

	Возврат НЕ Отказ;
	
КонецФункции // ВыполнитьПодключениеКСерверуSQL()

Функция СинонимРегистра(ВидРегистра, ИмяРегистра)

	Возврат Метаданные[ВидРегистра][ИмяРегистра].Синоним

КонецФункции // СинонимРегистра

Функция ПолучитьМассивИменТаблицХраненияИтогов(ПолноеИмяРегистра, Отказ = Ложь)
	
	МассивИменТаблицХранения = Новый Массив;
		
	Если НЕ ТипЗнч(ПолноеИмяРегистра) = Тип("Строка") Тогда
		Отказ = Истина;
	КонецЕсли; 
		
	Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ПолноеИмяРегистра, ".");
		
	Если НЕ Подстроки.Количество() = 2 Тогда
		Отказ = Истина;
	КонецЕсли; 

	Если НЕ Отказ Тогда	
		
		ИмяВидаРегистра = Подстроки[0];
		ИмяРегистра = Подстроки[1];
		
		ОбъектыМетаданных = Новый Массив;
		ОбъектыМетаданных.Добавить(Метаданные[ИмяВидаРегистра][ИмяРегистра]);
		ТаблицаСтруктуры = ПолучитьСтруктуруХраненияБазыДанных(ОбъектыМетаданных, Истина);
		
		Для каждого СтрокаТаблицы Из ТаблицаСтруктуры Цикл
			Если СтрокаТаблицы.Назначение = "Итоги"
			 ИЛИ СтрокаТаблицы.Назначение = "Обороты"
			 // РС
			 ИЛИ СтрокаТаблицы.Назначение = "ИтогиСрезПоследних"
			 ИЛИ СтрокаТаблицы.Назначение = "ИтогиСрезПервых"
			 // регисты бухгалтерии
			 ИЛИ СтрокаТаблицы.Назначение = "ИтогиМеждуСчетами"
			 ИЛИ СтрокаТаблицы.Назначение = "ИтогиПоСчетам"
			 ИЛИ СтрокаТаблицы.Назначение = "ИтогиПоСчетамССубконто1"
			 ИЛИ СтрокаТаблицы.Назначение = "ИтогиПоСчетамССубконто2"
			 ИЛИ СтрокаТаблицы.Назначение = "ИтогиПоСчетамССубконто3"
			Тогда
				МассивИменТаблицХранения.Добавить(СтрокаТаблицы.ИмяТаблицыХранения);	
			КонецЕсли;	
		КонецЦикла; 
		
	КонецЕсли; 
	
	Возврат	МассивИменТаблицХранения

КонецФункции // ПолучитьМассивИменТаблицХраненияИтогов()

Функция ПолучитьСтруктуруБД() 
	
	ОбъектыМетаданных = Новый Массив;
	Для каждого МетаданныеРегистр Из Метаданные.РегистрыНакопления Цикл
		ОбъектыМетаданных.Добавить(МетаданныеРегистр);
	КонецЦикла; 
	
	Возврат ПолучитьСтруктуруХраненияБазыДанных(ОбъектыМетаданных, Истина);

КонецФункции // ПолучитьСтруктуруБД

Процедура ОчиститьТаблицуСредствамиSQL(ПолноеИмяРегистра, Отказ = Ложь)
		
	МассивИменОчищаемыхТаблиц = ПолучитьМассивИменТаблицХраненияИтогов(ПолноеИмяРегистра, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Попытка
		Command = Новый COMОбъект("ADODB.Command");
		Command.ActiveConnection = Connection;
		
		ТекстКоманды = 
		"USE " + ИмяБД + " 
		|";
		
		Для каждого ИмяТаблицы Из МассивИменОчищаемыхТаблиц Цикл
		
			ТекстКоманды = ТекстКоманды + "
			|TRUNCATE TABLE [DBO].[" + ИмяТаблицы + "]
			|";
		
		КонецЦикла; 
		
		Command.CommandText = ТекстКоманды;
		Command.Execute();
	Исключение
		СообщитьОбОшибке(ОписаниеОшибки(), Отказ);
	КонецПопытки;	

КонецПроцедуры // ОчиститьТаблицуСредствамиSQL

Процедура СформироватьСтруктуруМетаданных(ДеревоДанных) Экспорт
	
	ДеревоДанных.Строки.Очистить();
	
	ДобавитьВетвьРегистров(ДеревоДанных, "РегистрыСведений",	"Регистры сведений", 	"РегистрСведений");
	ДобавитьВетвьРегистров(ДеревоДанных, "РегистрыНакопления",	"Регистры накопления", 	"РегистрНакопления");
	ДобавитьВетвьРегистров(ДеревоДанных, "РегистрыБухгалтерии",	"Регистры бухгалтерии", "РегистрБухгалтерии");
	
КонецПроцедуры // СформироватьСтруктуруМетаданных

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура СообщитьИнформацию(ТекстСообщения) Экспорт

	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщения;
	Сообщение.Сообщить();
	
КонецПроцедуры // СообщитьИнформацию

Процедура СообщитьОбОшибке(ТекстСообщения, Отказ = Ложь) Экспорт

	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщения;
	Сообщение.Сообщить();

	Отказ = Истина;

КонецПроцедуры // СообщитьОбОшибке

Процедура ДобавитьВетвьРегистров(ДеревоДанных, Имя, Синоним, Картинка)
	
	Если Имя = "РегистрыСведений" Тогда
		Если НЕ ПлатформаСтарше831() Тогда
			Возврат;
		КонецЕсли; 	
	КонецЕсли;
	
	НоваяСтрокаВидОбъекта = ДеревоДанных.Строки.Добавить();
	НоваяСтрокаВидОбъекта.Имя 		= Имя;
	НоваяСтрокаВидОбъекта.Синоним 	= Синоним;
	НоваяСтрокаВидОбъекта.Картинка 	= Картинка;
	
	Для каждого ОбъектМетаданных Из Метаданные[Имя] Цикл
		Если Метаданные[Имя] = Метаданные.РегистрыСведений Тогда
			Если НЕ ОбъектМетаданных.РазрешитьИтогиСрезПервых 
			   И НЕ ОбъектМетаданных.РазрешитьИтогиСрезПоследних Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли; 
		
		НоваяСтрокаОбъект = НоваяСтрокаВидОбъекта.Строки.Добавить();
		НоваяСтрокаОбъект.Имя 		= ОбъектМетаданных.Имя;
		НоваяСтрокаОбъект.Синоним 	= ОбъектМетаданных.Синоним;
		НоваяСтрокаОбъект.Картинка 	= Картинка;
			
	КонецЦикла;
	
	Если НоваяСтрокаВидОбъекта.Строки.Количество() = 0 Тогда
		ДеревоДанных.Строки.Удалить(НоваяСтрокаВидОбъекта);	
	КонецЕсли; 
	
КонецПроцедуры	

Функция ИнформационнаяБазаФайловая()
			
	СтрокаСоединенияИнформационнойБазы =  СтрокаСоединенияИнформационнойБазы();
	Возврат Найти(Врег(СтрокаСоединенияИнформационнойБазы), "FILE=") = 1;
	
КонецФункции 

Функция ОпределитьДоступностьСервераMSSQL() Экспорт
	
	Если ИнформационнаяБазаФайловая() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Возврат СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64;		

КонецФункции // ОпределитьДоступностьСервераMSSQL()

Функция ПлатформаСтарше831() Экспорт

	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Возврат СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.3.1.0") > 0;
	
КонецФункции 

// Сравнить две строки версий.
//
// Параметры
//  СтрокаВерсии1  – Строка – номер версии в формате РР.{П|ПП}.ЗЗ.СС
//  СтрокаВерсии2  – Строка – второй сравниваемый номер версии
//
// Возвращаемое значение:
//   Число   – больше 0, если СтрокаВерсии1 > СтрокаВерсии2; 0, если версии равны.
//
Функция СравнитьВерсии(Знач СтрокаВерсии1, Знач СтрокаВерсии2) Экспорт
	
	Строка1 = ?(ПустаяСтрока(СтрокаВерсии1), "0.0.0.0", СтрокаВерсии1);
	Строка2 = ?(ПустаяСтрока(СтрокаВерсии2), "0.0.0.0", СтрокаВерсии2);
	Версия1 = РазложитьСтрокуВМассивПодстрок(Строка1, ".");
	Если Версия1.Количество() <> 4 Тогда
		ВызватьИсключение СтрЗаменить(
		                    НСтр("ru = 'Неправильный формат строки версии: %1'"), "%1" , СтрокаВерсии1);
	КонецЕсли;
	Версия2 = РазложитьСтрокуВМассивПодстрок(Строка2, ".");
	Если Версия2.Количество() <> 4 Тогда
		ВызватьИсключение СтрЗаменить(
	                         НСтр("ru = 'Неправильный формат строки версии: %1'"), "%1" , СтрокаВерсии2);
	КонецЕсли;
	
	Результат = 0;
	Для Разряд = 0 По 3 Цикл
		Результат = Число(Версия1[Разряд]) - Число(Версия2[Разряд]);
		Если Результат <> 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     - если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//
//
// Возвращаемое значение:
//  Массив - массив строк.
//
// Примеры:
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",") - возвратит массив из 5 элементов, три из которых  - пустые строки;
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина) - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок(" один   два  ", " ") - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок("") - возвратит пустой массив;
//  РазложитьСтрокуВМассивПодстрок("",,Ложь) - возвратит массив с одним элементом "" (пустой строкой);
//  РазложитьСтрокуВМассивПодстрок("", " ") - возвратит массив с одним элементом "" (пустой строкой);
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
Версия = "1.0.0.7";
Представление = Метаданные().Синоним;
Идентификатор = Метаданные().Имя;
Информация = Метаданные().Синоним;

#КонецЕсли
