
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДоступнаРаботаСMSSQL = ОпределитьДоступностьСервераMSSQL();

	Если НЕ ДоступнаРаботаСMSSQL Тогда
		Элементы.ГруппаНастройкиПодключенияSQL.Видимость = ДоступнаРаботаСMSSQL;
		Элементы.ОчищатьТаблицыСредствамиSQL.Видимость = ДоступнаРаботаСMSSQL; 
		Элементы.ФормаПроверитьПодключениеКСерверуSQL.Видимость = ДоступнаРаботаСMSSQL;
	Иначе
		СтруктураСоединения = ПолучитьСтруктуруСоединенияИнформационнойБазы();
		Объект.ИмяСервера 	= СтруктураСоединения.ИмяСервера;
		Объект.ИмяБД 		= СтруктураСоединения.ИмяБД;
	КонецЕсли; 
	
	СформироватьСтруктуруМетаданных(ДеревоДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимостьДоступность();
	Если НЕ ДоступнаРаботаСMSSQL Тогда
		СообщитьИнформацию("Обработка предназначена для работы в клиент-серверном варианте с СУБД MS-SQL.
			|Очистка таблиц итогов средствами СУБД будет недоступна.");	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ДоступнаРаботаСMSSQL Тогда
		
		ПроверяемыеРеквизиты.Добавить("Объект.ИмяСервера");
		ПроверяемыеРеквизиты.Добавить("Объект.ИмяБД");
		
		Если НЕ Объект.АутентификацияОС Тогда
		
			ПроверяемыеРеквизиты.Добавить("Объект.ИмяПользователя");
		
		КонецЕсли; 
	
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийРеквизитовиФормы

&НаКлиенте
Процедура АутентификацияОСПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДанныхПометкаПриИзменении(Элемент)
	
	РекурсивноВнизСнятьУстановитьПометки(Элементы.ДеревоДанных.ТекущиеДанные, Элементы.ДеревоДанных.ТекущиеДанные.Пометка);
	
	Если Элементы.ДеревоДанных.ТекущиеДанные.Пометка Тогда
		РекурсивноВверхСнятьУстановитьПометки(Элементы.ДеревоДанных.ТекущиеДанные, 
			Элементы.ДеревоДанных.ТекущиеДанные.Пометка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаВыполнить(Команда)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли; 
	
	СообщитьИнформацию("Начало обработки. " + ТекущаяДата());
	
	ВыполнитьОбработку();
	
	СообщитьИнформацию(Символы.ПС + "Выполнение обработки завершено. " + ТекущаяДата());

КонецПроцедуры

&НаКлиенте
Процедура КомандаСнятьПометки(Команда)
	РекурсивноВнизСнятьУстановитьПометки(ДеревоДанных, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьПометки(Команда)
	РекурсивноВнизСнятьУстановитьПометки(ДеревоДанных, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеКСерверуSQL(Команда)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;	
	
	Отказ = Ложь;
	
	Если ВыполнятьНаСервере Тогда
		ПроверитьПодключениеКСерверуSQLНаСервере(Отказ);	
	Иначе
		ПроверитьПодключениеКСерверуSQLНаКлиенте(Отказ);
	КонецЕсли; 
	
	Если НЕ Отказ Тогда
		СообщитьИнформацию("Подключение выполнено успешно.");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции выполнения команд на SQL

&НаКлиенте
Процедура ПроверитьПодключениеКСерверуSQLНаКлиенте(Отказ)
	
	Connection = Неопределено;
	
	Если ВыполнитьПодключениеКСерверуSQLНаКлиенте(Connection, Отказ) Тогда
	
		Если НЕ Connection = Неопределено Тогда
			Connection.Close();	
			Connection = Неопределено;
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПодключениеКСерверуSQLНаСервере(Отказ)
	
	Connection = Неопределено;
	
	Если ВыполнитьПодключениеКСерверуSQLНаСервере(Connection, Отказ) Тогда
	
		Если НЕ Connection = Неопределено Тогда
			Connection.Close();	
			Connection = Неопределено;
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтрокуПодключенияSQL()
	
	СтрокаПодключения = "Provider=SQLOLEDB.1;";

	Если Объект.АутентификацияОС Тогда
	
		СтрокаПодключения = СтрокаПодключения + 	
		"Persist Security Info= True;" +
		"Trusted_Connection=yes;";
		
	Иначе
		
		СтрокаПодключения = СтрокаПодключения +
		"Persist Security Info = False;" +
		"User ID = " + Объект.ИмяПользователя + ";" +
		"Password = " + Объект.Пароль + ";";
		
	КонецЕсли; 
	
	СтрокаПодключения = СтрокаПодключения + 	
	"Initial Catalog=" + Объект.ИмяБД + ";" + 
	"Data Source=" + Объект.ИмяСервера + ";";
	
	Возврат СтрокаПодключения;
	
КонецФункции

&НаСервере
Функция ВыполнитьПодключениеКСерверуSQLНаСервере(Connection, Отказ = Ложь) 
	
	Connection = Новый COMОбъект("ADODB.Connection");
	ConnectionString = ПолучитьСтрокуПодключенияSQL();
	
    Попытка
        Если Connection.State = 0 Тогда
            Connection.Open(ConnectionString);
        КонецЕсли;
    Исключение 
		СообщитьОбОшибке(ОписаниеОшибки(), Отказ);
    КонецПопытки;

	Возврат НЕ Отказ;
	
КонецФункции

&НаКлиенте
Функция ВыполнитьПодключениеКСерверуSQLНаКлиенте(Connection, Отказ = Ложь) 
	
	Connection = Новый COMОбъект("ADODB.Connection");
	ConnectionString = ПолучитьСтрокуПодключенияSQL();
	
    Попытка
        Если Connection.State = 0 Тогда
            Connection.Open(ConnectionString);
        КонецЕсли;
    Исключение 
		СообщитьОбОшибке(ОписаниеОшибки(), Отказ);
    КонецПопытки;

	Возврат НЕ Отказ;
	
КонецФункции

&НаСервере
Процедура ПересчитатьИтогиРегистровНаСервере()
	
	КоллекцияСтрокДерева = ДеревоДанных.ПолучитьЭлементы();

	Для каждого СтрокаДереваВидОбъекта Из КоллекцияСтрокДерева Цикл
		
		Если НЕ СтрокаДереваВидОбъекта.Пометка Тогда
			Продолжить;
		КонецЕсли; 
		
		КоллекцияСтрокДереваВидОбъекта = СтрокаДереваВидОбъекта.ПолучитьЭлементы();
	
		Для каждого СтрокаДерева Из КоллекцияСтрокДереваВидОбъекта Цикл
			
			Если НЕ СтрокаДерева.Пометка Тогда
				Продолжить;
			КонецЕсли; 
			
			Если СтрокаДереваВидОбъекта.Имя = "РегистрыНакопления" Тогда
				РегистрыНакопления[СтрокаДерева.Имя].ПересчитатьИтоги();
				ТекстСообщения = "накопления """ + СтрокаДерева.Синоним + """."; 
			ИначеЕсли СтрокаДереваВидОбъекта.Имя = "РегистрыБухгалтерии" Тогда
				РегистрыБухгалтерии[СтрокаДерева.Имя].ПересчитатьИтоги();
				ТекстСообщения = "бухгалтерии """ + СтрокаДерева.Синоним + """."; 
			ИначеЕсли СтрокаДереваВидОбъекта.Имя = "РегистрыСведений" Тогда
				РегистрыСведений[СтрокаДерева.Имя].ПересчитатьИтоги();
				ТекстСообщения = "сведений """ + СтрокаДерева.Синоним + """."; 
			КонецЕсли;
			СообщитьИнформацию("Выполнен пересчет итогов регистра " + ТекстСообщения); 
		КонецЦикла; 
	
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицыРегистровНаКлиенте()
	
	Если НЕ ДоступнаРаботаСMSSQL ИЛИ НЕ Объект.ОчищатьТаблицыСредствамиSQL Тогда
		Возврат;
	КонецЕсли;	
	
	Connection = Неопределено; 
	Если НЕ ВыполнитьПодключениеКСерверуSQLНаКлиенте(Connection) Тогда
		Возврат;
	КонецЕсли;
	
	КоллекцияСтрокДерева = ДеревоДанных.ПолучитьЭлементы();

	Для каждого СтрокаДереваВидОбъекта Из КоллекцияСтрокДерева Цикл
		
		Если НЕ СтрокаДереваВидОбъекта.Пометка Тогда
			Продолжить;
		КонецЕсли; 
		
		КоллекцияСтрокДереваВидОбъекта = СтрокаДереваВидОбъекта.ПолучитьЭлементы();
	
		Для каждого СтрокаДерева Из КоллекцияСтрокДереваВидОбъекта Цикл
			
			Если СтрокаДерева.Пометка Тогда
				ОчиститьТаблицуСредствамиSQLНаКлиенте(Connection, СтрокаДерева.Имя, СтрокаДереваВидОбъекта.Имя);
			КонецЕсли; 

		КонецЦикла; 
	
	КонецЦикла; 
	
	Если НЕ Connection = Неопределено Тогда
		Connection.Close();	
		Connection = Неопределено;
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ОчиститьТаблицыРегистровНаСервере()
	
	Если НЕ ДоступнаРаботаСMSSQL ИЛИ НЕ Объект.ОчищатьТаблицыСредствамиSQL Тогда
		Возврат;
	КонецЕсли;	
	
	Connection = Неопределено; 
	Если НЕ ВыполнитьПодключениеКСерверуSQLНаСервере(Connection) Тогда
		Возврат;
	КонецЕсли;
	
	КоллекцияСтрокДерева = ДеревоДанных.ПолучитьЭлементы();

	Для каждого СтрокаДереваВидОбъекта Из КоллекцияСтрокДерева Цикл
		
		Если НЕ СтрокаДереваВидОбъекта.Пометка Тогда
			Продолжить;
		КонецЕсли; 
		
		КоллекцияСтрокДереваВидОбъекта = СтрокаДереваВидОбъекта.ПолучитьЭлементы();
	
		Для каждого СтрокаДерева Из КоллекцияСтрокДереваВидОбъекта Цикл
			
			Если СтрокаДерева.Пометка Тогда
				ОчиститьТаблицуСредствамиSQLНаСервере(Connection, СтрокаДерева.Имя, СтрокаДереваВидОбъекта.Имя);
			КонецЕсли; 

		КонецЦикла; 
	
	КонецЦикла; 
	
	Если НЕ Connection = Неопределено Тогда
		Connection.Close();	
		Connection = Неопределено;
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработку()
	
	Если Объект.ОчищатьТаблицыСредствамиSQL Тогда
		ОчиститьТаблицыРегистров();
	КонецЕсли; 
	
	Если Объект.ПересчитыватьИтоги Тогда
		ПересчитатьИтогиРегистровНаСервере();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицыРегистров()
	
	Если ВыполнятьНаСервере Тогда
		ОчиститьТаблицыРегистровНаСервере();		
	Иначе
		ОчиститьТаблицыРегистровНаКлиенте();
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ОчиститьТаблицуСредствамиSQLНаСервере(Connection, ИмяРегистра, ИмяВидаРегистра, Отказ = Ложь)
		
	МассивИменОчищаемыхТаблиц = ПолучитьМассивИменТаблицХраненияИтогов(ИмяРегистра, ИмяВидаРегистра);
	
	Попытка
		Command = Новый COMОбъект("ADODB.Command");
		Command.ActiveConnection = Connection;
		
		ТекстКоманды = 
		"USE " + Объект.ИмяБД + " 
		|";
		
		Для каждого ИмяТаблицы Из МассивИменОчищаемыхТаблиц Цикл
		
			ТекстКоманды = ТекстКоманды + "
			|TRUNCATE TABLE [DBO].[" + ИмяТаблицы + "]
			|";
		
		КонецЦикла; 
		
		Command.CommandText = ТекстКоманды;
		Command.Execute();
	Исключение
		СообщитьОбОшибке(ОписаниеОшибки(), Отказ);
	КонецПопытки;	

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицуСредствамиSQLНаКлиенте(Connection, ИмяРегистра, ИмяВидаРегистра, Отказ = Ложь)
		
	МассивИменОчищаемыхТаблиц = ПолучитьМассивИменТаблицХраненияИтогов(ИмяРегистра, ИмяВидаРегистра);
	
	Попытка
		Command = Новый COMОбъект("ADODB.Command");
		Command.ActiveConnection = Connection;
		
		ТекстКоманды = 
		"USE " + Объект.ИмяБД + " 
		|";
		
		Для каждого ИмяТаблицы Из МассивИменОчищаемыхТаблиц Цикл
		
			ТекстКоманды = ТекстКоманды + "
			|TRUNCATE TABLE [DBO].[" + ИмяТаблицы + "]
			|";
		
		КонецЦикла; 
		
		Command.CommandText = ТекстКоманды;
		Command.Execute();
	Исключение
		СообщитьОбОшибке(ОписаниеОшибки(), Отказ);
	КонецПопытки;	

КонецПроцедуры

&НаКлиенте
Процедура РекурсивноВнизСнятьУстановитьПометки(ВетвьДерева, Пометка)
	
	ВетвьДереваСтроки = ВетвьДерева.ПолучитьЭлементы();

	Для каждого СтрокаДерева Из ВетвьДереваСтроки Цикл
		СтрокаДерева.Пометка = Пометка;	
	    РекурсивноВнизСнятьУстановитьПометки(СтрокаДерева, Пометка);
	КонецЦикла; 		

КонецПроцедуры

&НаКлиенте
Процедура РекурсивноВверхСнятьУстановитьПометки(ВетвьДерева, Пометка)
	
	ВетвьДереваРодитель = ВетвьДерева.ПолучитьРодителя();
	
	Если НЕ ВетвьДереваРодитель = Неопределено Тогда
		ВетвьДереваРодитель.Пометка = Пометка;	
		РекурсивноВверхСнятьУстановитьПометки(ВетвьДереваРодитель, Пометка);
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруМетаданных(ДеревоДанных) Экспорт
	
	ДеревоРегистров = РеквизитФормыВЗначение("ДеревоДанных");
	ДеревоРегистров.Строки.Очистить();
	
	ДобавитьВетвьРегистров(ДеревоРегистров, "РегистрыСведений",		"Регистры сведений", 	0);
	ДобавитьВетвьРегистров(ДеревоРегистров, "РегистрыБухгалтерии",	"Регистры бухгалтерии", 1);
	ДобавитьВетвьРегистров(ДеревоРегистров, "РегистрыНакопления", 	"Регистры накопления", 	2);
	
	ЗначениеВРеквизитФормы(ДеревоРегистров, "ДеревоДанных");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВетвьРегистров(ДеревоДанных, Имя, Синоним, ИндексКартинки)
	
	Если Имя = "РегистрыСведений" Тогда
		Если НЕ ПлатформаСтарше831() Тогда
			Возврат;
		КонецЕсли; 	
	КонецЕсли;
	
	НоваяСтрокаВидОбъекта = ДеревоДанных.Строки.Добавить();
	НоваяСтрокаВидОбъекта.Имя 				= Имя;
	НоваяСтрокаВидОбъекта.Синоним 			= Синоним;
	НоваяСтрокаВидОбъекта.ИндексКартинки	= ИндексКартинки;
	
	Для каждого ОбъектМетаданных Из Метаданные[Имя] Цикл
		
		Если Метаданные[Имя] = Метаданные.РегистрыСведений Тогда
			Если НЕ ОбъектМетаданных.РазрешитьИтогиСрезПервых 
			   И НЕ ОбъектМетаданных.РазрешитьИтогиСрезПоследних Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;	
		
		НоваяСтрокаОбъект = НоваяСтрокаВидОбъекта.Строки.Добавить();
		НоваяСтрокаОбъект.Имя 				= ОбъектМетаданных.Имя;
		НоваяСтрокаОбъект.Синоним 			= ОбъектМетаданных.Синоним;
		НоваяСтрокаОбъект.ИндексКартинки	= ИндексКартинки;
			
	КонецЦикла;
	
	Если НоваяСтрокаВидОбъекта.Строки.Количество() = 0 Тогда
		ДеревоДанных.Строки.Удалить(НоваяСтрокаВидОбъекта);	
	КонецЕсли; 
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьВидимостьДоступность()

	Элементы.ИмяПользователя.Доступность = НЕ Объект.АутентификацияОС;
	Элементы.Пароль.Доступность = НЕ Объект.АутентификацияОС;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивИменТаблицХраненияИтогов(ИмяРегистра, ИмяВидаРегистра)

	МассивИменТаблицХранения = Новый Массив;
	
	ОбъектыМетаданных = Новый Массив;
	ОбъектыМетаданных.Добавить(Метаданные[ИмяВидаРегистра][ИмяРегистра]);
	ТаблицаСтруктуры = ПолучитьСтруктуруХраненияБазыДанных(ОбъектыМетаданных, Истина);
	
	Для каждого СтрокаТаблицы Из ТаблицаСтруктуры Цикл
		Если СтрокаТаблицы.Назначение = "Итоги"
		 ИЛИ СтрокаТаблицы.Назначение = "Обороты"
		 // РС
		 ИЛИ СтрокаТаблицы.Назначение = "ИтогиСрезПоследних"
		 ИЛИ СтрокаТаблицы.Назначение = "ИтогиСрезПервых"
		 // регисты бухгалтерии
		 ИЛИ СтрокаТаблицы.Назначение = "ИтогиМеждуСчетами"
		 ИЛИ СтрокаТаблицы.Назначение = "ИтогиПоСчетам"
		 ИЛИ СтрокаТаблицы.Назначение = "ИтогиПоСчетамССубконто1"
		 ИЛИ СтрокаТаблицы.Назначение = "ИтогиПоСчетамССубконто2"
		 ИЛИ СтрокаТаблицы.Назначение = "ИтогиПоСчетамССубконто3"
		Тогда
			МассивИменТаблицХранения.Добавить(СтрокаТаблицы.ИмяТаблицыХранения);	
		КонецЕсли;	
	КонецЦикла; 
	
	Возврат	МассивИменТаблицХранения;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

&НаСервере
Функция ПлатформаСтарше831()
	
	Возврат РеквизитФормыВЗначение("Объект").ПлатформаСтарше831();
	
КонецФункции	

&НаСервере
Функция НомерПубликации()

	Возврат РеквизитФормыВЗначение("Объект").НомерПубликации();

КонецФункции 

// Определяет режим эксплуатации информационной базы файловый (Истина) или серверный (Ложь).
// При проверке используется СтрокаСоединенияИнформационнойБазы, которую можно указать явно.
//
// Параметры:
//  СтрокаСоединенияИнформационнойБазы - Строка - параметр используется, если
//                 нужно проверить строку соединения не текущей информационной базы.
//
// Возвращаемое значение:
//  Булево - Признак файловой базы.
//
&НаСервереБезКонтекста
Функция ИнформационнаяБазаФайловая()
			
	СтрокаСоединенияИнформационнойБазы =  СтрокаСоединенияИнформационнойБазы();
	Возврат СтрНайти(Врег(СтрокаСоединенияИнформационнойБазы), "FILE=") = 1;
	
КонецФункции 

&НаСервереБезКонтекста
Функция ОпределитьДоступностьСервераMSSQL()
	
	Если ИнформационнаяБазаФайловая() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Возврат СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86
		ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64;		

КонецФункции

&НаСервереБезКонтекста
Процедура СообщитьИнформацию(ТекстСообщения)

	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщения;
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СообщитьОбОшибке(ТекстСообщения, Отказ = Ложь)

	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщения;
	Сообщение.Сообщить();

	Отказ = Истина;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруСоединенияИнформационнойБазы()

	СтруктуруСоединения = Новый Структура("ИмяСервера, ИмяБД");
	
	СтрокаСоединенияСБД = СтрокаСоединенияИнформационнойБазы();
	
	Если ИнформационнаяБазаФайловая() Тогда
		Возврат Сред(СтрокаСоединенияСБД, 6, СтрДлина(СтрокаСоединенияСБД) - 6);
	КонецЕсли;
		
	// Прибавить к имени сервера имя пути информационной базы
	ПозицияПоиска = СтрНайти(Врег(СтрокаСоединенияСБД), "SRVR=");
	Если ПозицияПоиска <> 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПозицияТочкиСЗапятой = СтрНайти(СтрокаСоединенияСБД, ";");
	НачальнаяПозицияКопирования = 6 + 1;
	КонечнаяПозицияКопирования = ПозицияТочкиСЗапятой - 2; 
	
	ИмяСервера = Сред(СтрокаСоединенияСБД, НачальнаяПозицияКопирования, 
		КонечнаяПозицияКопирования - НачальнаяПозицияКопирования + 1);
	
	СтрокаСоединенияСБД = Сред(СтрокаСоединенияСБД, ПозицияТочкиСЗапятой + 1);
	
	// Позиция имени сервера
	ПозицияПоиска = СтрНайти(Врег(СтрокаСоединенияСБД), "REF=");
	Если ПозицияПоиска <> 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НачальнаяПозицияКопирования = 6;
	ПозицияТочкиСЗапятой = СтрНайти(СтрокаСоединенияСБД, ";");
	КонечнаяПозицияКопирования = ПозицияТочкиСЗапятой - 2; 
	
	ИмяБД = Сред(СтрокаСоединенияСБД, НачальнаяПозицияКопирования,
		КонечнаяПозицияКопирования - НачальнаяПозицияКопирования + 1);
	
	СтруктуруСоединения.Вставить("ИмяСервера", 	ИмяСервера);
	СтруктуруСоединения.Вставить("ИмяБД", 		ИмяБД);
	
	Возврат СтруктуруСоединения;
	
КонецФункции

#КонецОбласти
